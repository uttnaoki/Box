rm -f cla32.0on
sflexp cla32.sfl cla32.hsl -mem lll  || (rm -f *.cube cla32.hsl; false)

+-------------------------------------------------------------+
| SFLEXP        3.0 2002/08/31 (i686-Linux-2.6.27-10-generic) |
|             This program is a part of the PARTHENON system. |
|                                 Copyright (C) 1989-2002 NTT |
+-------------------------------------------------------------+

Memory LLL size
Mem alloc start address 0xeb7d4020 end 0xf77d401f
image load completed.
This prolog image is designed and programmed by Kiyoshi Oguri.
==REF== cla32.sfl
==REF== ./allcla.h
** include ./allcla.h. **
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.

Module: cla definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla defined.
Instructs arguments and stages tasks of module: cla defined.
Instructs behavior of module: cla defined.

Module: cla2 definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla2 defined.
Instructs arguments and stages tasks of module: cla2 defined.
Instructs behavior of module: cla2 defined.

Module: cla4 definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla4 defined.
Instructs arguments and stages tasks of module: cla4 defined.
Instructs behavior of module: cla4 defined.

Module: cla8 definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla8 defined.
Instructs arguments and stages tasks of module: cla8 defined.
Instructs behavior of module: cla8 defined.

Module: cla16 definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla16 defined.
Instructs arguments and stages tasks of module: cla16 defined.
Instructs behavior of module: cla16 defined.

Module: cla32 definition start.
Submod_class: cla defined.
Submod_class: cla2 defined.
Submod_class: cla4 defined.
Submod_class: cla8 defined.
Submod_class: cla16 defined.
All facilities of module: cla32 defined.
Instructs arguments and stages tasks of module: cla32 defined.
Instructs behavior of module: cla32 defined.
sfl area 98% remained.
atom area 95% remained.
** translate completion **
** expantion start **
** expand parameters are as follow **
	mode_flg---------------exp
	tmp_value--------------sel_org
	post_opt---------------single
	time_limit-------------v100
	change_to_nand_nor-----8
	nld_out_mode-----------yes
	pcd_out_mode-----------no
	circuit_pcd_out_mode---no
	sel_type---------------hie
	exp_mode_flg-----------group
	multi_level_opt--------yes
	dont_care_opt----------yes
	level_factor-----------0
	to_other_tool----------no
	machine----------------sun
	partial_demo-----------partial
	file_name--------------cla32.sfl
	out_file_name----------cla32.hsl

#### module: cla ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=3 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 4, Nof outputs = 2, Nof cubes = 3 **
** start logic compaction **
** Nof cubes = 2 **
** logic compaction done **
** nots(0) extraction done **
** ands(2) extraction done **
** ors(1) extraction done **
** selectors(2) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=8 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 8, Nof cubes = 8 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(8) extraction done **

#### into merge phase ####
** selecter(8) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 2, nof_ors = 1 **
** nots_fin = 0, ands_fin = 4, ors_fin = 2 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(eor_out,1,eor-1)
	3	pin(input,1,cin)
	4	pin(input,1,b)
	5	pin(input,1,a)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(3),pin(2))
	2	and(pin(5),pin(4))
** ors: or(fin,...) **
	1	or(and(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,cout),or(1),data,or(1))
	2	action(pin(output,1,qout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 2, nof_ors = 2 **
** input     4 **
** output    2 **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
** start weak division **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
** start factorization <1> **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
** start and extraction <1> **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
** start or extraction <1> **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
** start gate reshaping **
                               ** fin    6 **  ** gate    3 **  ** level  2 **
P003<A002>   A001<O001>   O001         
P002         A002         A001         
P005<A001>                             
P004                                   
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla) **

#### module: cla2 ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=7 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 7, Nof outputs = 4, Nof cubes = 7 **
** start logic compaction **
** Nof cubes = 7 **
** logic compaction done **
** nots(0) extraction done **
** ands(4) extraction done **
** ors(3) extraction done **
** selectors(4) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=12 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 12, Nof cubes = 12 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(12) extraction done **

#### into merge phase ####
** selecter(12) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 4, nof_ors = 3 **
** nots_fin = 0, ands_fin = 8, ors_fin = 6 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(output,1,.(qout,.(cy,[])))
	3	pin(output,1,.(qout,.(cx,[])))
	4	pin(output,1,.(pout,.(cy,[])))
	5	pin(output,1,.(pout,.(cx,[])))
	6	pin(output,1,qout)
	7	pin(output,1,pout)
	8	pin(input,1,cin)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(4),pin(3))
	2	and(pin(5),pin(4))
	3	and(pin(8),pin(5))
	4	and(pin(8),pin(7))
** ors: or(fin,...) **
	1	or(pin(6),and(4))
	2	or(pin(3),and(3))
	3	or(pin(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,qout),or(3),data,or(3))
	2	action(pin(input,1,.(cin,.(cy,[]))),or(2),data,or(2))
	3	action(pin(output,1,cout),or(1),data,or(1))
	4	action(pin(output,1,pout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 3 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 4 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 7, nof_ors = 4 **
** input     7 **
** output    4 **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start weak division **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start factorization <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start and extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start or extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start gate reshaping **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
P008<A001>   P002<O001>   O001         
P007         A004         O002         
P008<A002>   P006<O003>   O003         
P005         A001         A003         
P004<A004>   P005<A003>                
P003         P004                      
             P003<O002>                
             A002                      
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla2) **

#### module: cla4 ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=7 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 7, Nof outputs = 4, Nof cubes = 7 **
** start logic compaction **
** Nof cubes = 7 **
** logic compaction done **
** nots(0) extraction done **
** ands(4) extraction done **
** ors(3) extraction done **
** selectors(4) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=12 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 12, Nof cubes = 12 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(12) extraction done **

#### into merge phase ####
** selecter(12) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 4, nof_ors = 3 **
** nots_fin = 0, ands_fin = 8, ors_fin = 6 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(output,1,.(qout,.(c2y,[])))
	3	pin(output,1,.(qout,.(c2x,[])))
	4	pin(output,1,.(pout,.(c2y,[])))
	5	pin(output,1,.(pout,.(c2x,[])))
	6	pin(output,1,qout)
	7	pin(output,1,pout)
	8	pin(input,1,cin)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(4),pin(3))
	2	and(pin(5),pin(4))
	3	and(pin(8),pin(5))
	4	and(pin(8),pin(7))
** ors: or(fin,...) **
	1	or(pin(6),and(4))
	2	or(pin(3),and(3))
	3	or(pin(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,qout),or(3),data,or(3))
	2	action(pin(input,1,.(cin,.(c2y,[]))),or(2),data,or(2))
	3	action(pin(output,1,cout),or(1),data,or(1))
	4	action(pin(output,1,pout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 3 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 4 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 7, nof_ors = 4 **
** input     7 **
** output    4 **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start weak division **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start factorization <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start and extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start or extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start gate reshaping **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
P008<A001>   P002<O001>   O001         
P007         A004         O002         
P008<A002>   P006<O003>   O003         
P005         A001         A003         
P004<A004>   P005<A003>                
P003         P004                      
             P003<O002>                
             A002                      
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla4) **

#### module: cla8 ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=7 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 7, Nof outputs = 4, Nof cubes = 7 **
** start logic compaction **
** Nof cubes = 7 **
** logic compaction done **
** nots(0) extraction done **
** ands(4) extraction done **
** ors(3) extraction done **
** selectors(4) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=12 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 12, Nof cubes = 12 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(12) extraction done **

#### into merge phase ####
** selecter(12) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 4, nof_ors = 3 **
** nots_fin = 0, ands_fin = 8, ors_fin = 6 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(output,1,.(qout,.(c4y,[])))
	3	pin(output,1,.(qout,.(c4x,[])))
	4	pin(output,1,.(pout,.(c4y,[])))
	5	pin(output,1,.(pout,.(c4x,[])))
	6	pin(output,1,qout)
	7	pin(output,1,pout)
	8	pin(input,1,cin)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(4),pin(3))
	2	and(pin(5),pin(4))
	3	and(pin(8),pin(5))
	4	and(pin(8),pin(7))
** ors: or(fin,...) **
	1	or(pin(6),and(4))
	2	or(pin(3),and(3))
	3	or(pin(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,qout),or(3),data,or(3))
	2	action(pin(input,1,.(cin,.(c4y,[]))),or(2),data,or(2))
	3	action(pin(output,1,cout),or(1),data,or(1))
	4	action(pin(output,1,pout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 3 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 4 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 7, nof_ors = 4 **
** input     7 **
** output    4 **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start weak division **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start factorization <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start and extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start or extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start gate reshaping **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
P008<A001>   P002<O001>   O001         
P007         A004         O002         
P008<A002>   P006<O003>   O003         
P005         A001         A003         
P004<A004>   P005<A003>                
P003         P004                      
             P003<O002>                
             A002                      
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla8) **

#### module: cla16 ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=7 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 7, Nof outputs = 4, Nof cubes = 7 **
** start logic compaction **
** Nof cubes = 7 **
** logic compaction done **
** nots(0) extraction done **
** ands(4) extraction done **
** ors(3) extraction done **
** selectors(4) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=12 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 12, Nof cubes = 12 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(12) extraction done **

#### into merge phase ####
** selecter(12) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 4, nof_ors = 3 **
** nots_fin = 0, ands_fin = 8, ors_fin = 6 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(output,1,.(qout,.(c8y,[])))
	3	pin(output,1,.(qout,.(c8x,[])))
	4	pin(output,1,.(pout,.(c8y,[])))
	5	pin(output,1,.(pout,.(c8x,[])))
	6	pin(output,1,qout)
	7	pin(output,1,pout)
	8	pin(input,1,cin)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(4),pin(3))
	2	and(pin(5),pin(4))
	3	and(pin(8),pin(5))
	4	and(pin(8),pin(7))
** ors: or(fin,...) **
	1	or(pin(6),and(4))
	2	or(pin(3),and(3))
	3	or(pin(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,qout),or(3),data,or(3))
	2	action(pin(input,1,.(cin,.(c8y,[]))),or(2),data,or(2))
	3	action(pin(output,1,cout),or(1),data,or(1))
	4	action(pin(output,1,pout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 3 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 4 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 7, nof_ors = 4 **
** input     7 **
** output    4 **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start weak division **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start factorization <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start and extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start or extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start gate reshaping **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
P008<A001>   P002<O001>   O001         
P007         A004         O002         
P008<A002>   P006<O003>   O003         
P005         A001         A003         
P004<A004>   P005<A003>                
P003         P004                      
             P003<O002>                
             A002                      
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla16) **

#### module: cla32 ####
** start checking exclusively constant assign **
** end checking exclusively constant assign **
** flatten end **

#### start logic expand which appear in data transfer source ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=7 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 7, Nof outputs = 4, Nof cubes = 7 **
** start logic compaction **
** Nof cubes = 7 **
** logic compaction done **
** nots(0) extraction done **
** ands(4) extraction done **
** ors(3) extraction done **
** selectors(4) extraction done **

#### start expand behavior in stage or instruct: do ####
** state encode done **
** bool op done **
** enter mini_divide ** level=1, size=12 **
** condition elements sort done **
** actions sort done **
** destinations sort done **
** sources sort done **
** Nof inputs = 1, Nof outputs = 12, Nof cubes = 12 **
** start logic compaction **
** Nof cubes = 1 **
** logic compaction done **
** nots(0) extraction done **
** ands(0) extraction done **
** ors(0) extraction done **
** selectors(12) extraction done **

#### into merge phase ####
** selecter(12) merge done **
** ors(0) added **

#### into multi-level logic optimization ####
** used gate extract done **
** used gate sort done **
** used pin extract and sort done **
** nof_nots = 0, nof_ands = 4, nof_ors = 3 **
** nots_fin = 0, ands_fin = 8, ors_fin = 6 **
** input pins: pin(type,width,name) **
	1	pin(const,1,1)
	2	pin(output,1,.(qout,.(c16y,[])))
	3	pin(output,1,.(qout,.(c16x,[])))
	4	pin(output,1,.(pout,.(c16y,[])))
	5	pin(output,1,.(pout,.(c16x,[])))
	6	pin(output,1,qout)
	7	pin(output,1,pout)
	8	pin(input,1,cin)
** nots: not(fin) **
** ands: and(fin,...) **
	1	and(pin(4),pin(3))
	2	and(pin(5),pin(4))
	3	and(pin(8),pin(5))
	4	and(pin(8),pin(7))
** ors: or(fin,...) **
	1	or(pin(6),and(4))
	2	or(pin(3),and(3))
	3	or(pin(2),and(1))
** actions: action(destination,source,type,target) **
	1	action(pin(output,1,qout),or(3),data,or(3))
	2	action(pin(input,1,.(cin,.(c16y,[]))),or(2),data,or(2))
	3	action(pin(output,1,cout),or(1),data,or(1))
	4	action(pin(output,1,pout),and(2),data,and(2))
** into interface to c-program **
** make comp done **
** nots link done **
** ands link done **
** ors link done **
** sels link done **
** dont_cares link done **
** into post opt **
** time limit is v100 **
** Action_id = 1 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 2 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 3 *****************************
True (nof_products = 2)
Dont_care (nof_products = 1)
Result (nof_products = 2)
** Action_id = 4 *****************************
True (nof_products = 1)
Dont_care (nof_products = 1)
Result (nof_products = 1)
** into interface to multi **
** nof_nots = 0, nof_ands = 7, nof_ors = 4 **
** input     7 **
** output    4 **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start weak division **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start factorization <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start and extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start or extraction <1> **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
** start gate reshaping **
                               ** fin   14 **  ** gate    7 **  ** level  2 **
P008<A001>   P002<O001>   O001         
P007         A004         O002         
P008<A002>   P006<O003>   O003         
P005         A001         A003         
P004<A004>   P005<A003>                
P003         P004                      
             P003<O002>                
             A002                      
                                       
** nots extract done **
** ands extract done **
** ors extract done **
** sels extract done **

#### start and-or to nand-nor exchange and limit fin ####
** make comp done **
** sels link done **
** pins link done **
** nots link done **
** ands link done **
** ors link done **
** fin limit done **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** insert or replace not gate **
** and-or to nand-nor done **

#### generating net list in HSL ####
** out one HSL module(cla32) **
!! local stack 0%(p: 0%) used, global stack 0%(p: 0%) used, trail stack 0%(p: 0%) used !!
!! gc free 77998 words !!
!! local stack 0%(t: 0%) used, global stack 0%(t: 0%) used, trail stack 0%(t: 0%) used !!

	There are 0 errors.

!! local stack 0% used, global stack 0% used, trail stack 0% used !!
rm -f *.cube
touch cla32.0off
rm -rf cla32.1st cla32.1on cla32.1off
mkdir cla32.1st
hsl_nld cla32.hsl cla32.1st
touch cla32.1off
cat /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/opt_scr.op1 | sed 's/TargeT/cla32/' > cla32.op1
cat /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/opt_scr.lv2 | sed 's/TargeT/cla32/' \
	| sed 's/InputpiN/12/' > cla32.tmp
echo "echo OK!" > cla32.ons
ITR_TIMES=1 ;\
	while (test $ITR_TIMES -le 2) \
	do \
	   echo "making script file for ONSET iteration $ITR_TIMES" ;\
	   echo "echo ####### ONSET iteration $ITR_TIMES #######" >> cla32.ons ;\
	   cat cla32.tmp >> cla32.ons ;\
	   ITR_TIMES=`expr $ITR_TIMES + 1` ;\
	done
making script file for ONSET iteration 1
making script file for ONSET iteration 2
rm -f cla32.tmp
rm -rf cla32.2nd cla32.2on cla32.2off
mkdir cla32.2nd
echo cla32.op1 | opt_map cla32 cla32.1st /home/users/ecs/nobuya/opt/parthenon/sfl_lib.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start_ex.dir

+-------------------------------------------------------------+
| OPT_MAP       3.0 2002/08/31 (i686-Linux-2.6.27-10-generic) |
|             This program is a part of the PARTHENON system. |
|                                 Copyright (C) 1989-2002 NTT |
+-------------------------------------------------------------+

** load library from cla32.1st **
** load library from /home/users/ecs/nobuya/opt/parthenon/sfl_lib.dir **
opt_map: start to read r1024_8.pcd
opt_map: start to read r256_8.pcd
opt_map: start to read r64_8.pcd
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start.dir **
opt_map: start to read and--2.pcd
opt_map: start to read and--3.pcd
opt_map: start to read and--4.pcd
opt_map: start to read and--5.pcd
opt_map: start to read and--6.pcd
opt_map: start to read and--7.pcd
opt_map: start to read and--8.pcd
opt_map: start to read aoi--21.pcd
opt_map: start to read aoi--211.pcd
opt_map: start to read aoi--22.pcd
opt_map: start to read aoi--221.pcd
opt_map: start to read aoi--222.pcd
opt_map: start to read aoi--31.pcd
opt_map: start to read aoi--32.pcd
opt_map: start to read aoi--33.pcd
opt_map: start to read bgate--2.pcd
opt_map: start to read enor--2.pcd
opt_map: start to read eor--2.pcd
opt_map: start to read high-.pcd
opt_map: start to read inv-.pcd
opt_map: start to read low-.pcd
opt_map: start to read nand--2.pcd
opt_map: start to read nand--3.pcd
opt_map: start to read nand--4.pcd
opt_map: start to read nand--5.pcd
opt_map: start to read nand--6.pcd
opt_map: start to read nand--7.pcd
opt_map: start to read nand--8.pcd
opt_map: start to read ninv-.pcd
opt_map: start to read nor--2.pcd
opt_map: start to read nor--3.pcd
opt_map: start to read nor--4.pcd
opt_map: start to read nor--5.pcd
opt_map: start to read nor--6.pcd
opt_map: start to read nor--7.pcd
opt_map: start to read nor--8.pcd
opt_map: start to read oai--21.pcd
opt_map: start to read oai--211.pcd
opt_map: start to read oai--22.pcd
opt_map: start to read oai--221.pcd
opt_map: start to read oai--222.pcd
opt_map: start to read oai--31.pcd
opt_map: start to read oai--32.pcd
opt_map: start to read oai--33.pcd
opt_map: start to read or--2.pcd
opt_map: start to read or--3.pcd
opt_map: start to read or--4.pcd
opt_map: start to read or--5.pcd
opt_map: start to read or--6.pcd
opt_map: start to read or--7.pcd
opt_map: start to read or--8.pcd
opt_map: start to read reg---1.pcd
opt_map: start to read reg--1.pcd
opt_map: start to read reg-1.pcd
opt_map: start to read regr-1.pcd
opt_map: start to read regs-1.pcd
opt_map: start to read sreg---1.pcd
opt_map: start to read sreg--1.pcd
opt_map: start to read sreg-1.pcd
opt_map: start to read srgr-1.pcd
opt_map: start to read srgs-1.pcd
opt_map: start to read ts_buf-.pcd
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start_ex.dir **
** install top module (cla32) **
opt_map: start to read cla32.1st/cla32.nld
opt_map: start to read cla32.1st/cla16.nld
opt_map: start to read cla32.1st/cla8.nld
opt_map: start to read cla32.1st/cla4.nld
opt_map: start to read cla32.1st/cla2.nld
opt_map: start to read cla32.1st/cla.nld
####### start #############################
    all statistics calculated
--- initial statistics summary ------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 2006.3
	area       = 281.32
	gates      = 1069

		synthesized gates = 1069
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- initial component summary -------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          525             2         1974         276         1050 cla16
pcd            0             1            0           0            0 high-
pcd            1             5            7           2            5 inv-
pcd            0             1            0           0            0 low-
pcd            2             6           20           3           12 nand--2
pcd            2             1            5           1            2 nor--2
-------------------------------------------------------------------------------
pcd_total                   14           32           5           19
####### remove ############################
####### after remove ######################
    all statistics calculated
--- statistics summary --------------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1475.5
	area       = 191.7
	gates      = 743

		synthesized gates = 743
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- component summary ---------------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          362             2         1447         187          726 cla16
pcd            1             5            7           2            5 inv-
pcd            2             5           17           2           10 nand--2
pcd            2             1            5           1            2 nor--2
-------------------------------------------------------------------------------
pcd_total                   11           29           5           17
OK!
####### ONSET iteration 1 #######
####### apply ONSET on each flatten submodule ########
type class  power         area                 gates  sub_mod_name
------------------------------------------------------------------
nld  cla16  7.217000e+02  9.315000e+01           362  c16y
nld  cla16  7.251000e+02  9.364000e+01           364  c16x
--- flat & enclose at each nld in the top-module -------
created a new sub_module. class: cla16_subc-1, name: c16y_subm-1
 nof_pcds: 36, nof_inputs: 12, nof_outputs: 6
created a new sub_module. class: cla16_subc-2, name: c16y_subm-2
 nof_pcds: 10, nof_inputs: 7, nof_outputs: 3
created a new sub_module. class: cla16_subc-3, name: c16y_subm-3
 nof_pcds: 28, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-4, name: c16y_subm-4
 nof_pcds: 35, nof_inputs: 12, nof_outputs: 6
created a new sub_module. class: cla16_subc-5, name: c16y_subm-5
 nof_pcds: 28, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-6, name: c16y_subm-6
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-7, name: c16y_subm-7
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-8, name: c16y_subm-8
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-9, name: c16y_subm-9
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-10, name: c16y_subm-10
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-11, name: c16y_subm-11
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
sub_module(c16y_subm-11) was disclosed.
sub_module(c16y_subm-10) was disclosed.
sub_module(c16y_subm-9) was disclosed.
sub_module(c16y_subm-8) was disclosed.
sub_module(c16y_subm-7) was disclosed.
sub_module(c16y_subm-6) was disclosed.
created a new sub_module. class: cla16_subc-6, name: c16x_subm-1
 nof_pcds: 36, nof_inputs: 12, nof_outputs: 6
created a new sub_module. class: cla16_subc-7, name: c16x_subm-2
 nof_pcds: 10, nof_inputs: 7, nof_outputs: 3
created a new sub_module. class: cla16_subc-8, name: c16x_subm-3
 nof_pcds: 28, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-9, name: c16x_subm-4
 nof_pcds: 35, nof_inputs: 12, nof_outputs: 6
created a new sub_module. class: cla16_subc-10, name: c16x_subm-5
 nof_pcds: 28, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-11, name: c16x_subm-6
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-12, name: c16x_subm-7
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-13, name: c16x_subm-8
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16--------- submodule cla32_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-5 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-4 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-3 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-2 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-5 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-4 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-3 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-2 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
_subc-14, name: c16x_subm-9
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-15, name: c16x_subm-10
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-16, name: c16x_subm-11
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-17, name: c16x_subm-12
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
sub_module(c16x_subm-12) was disclosed.
sub_module(c16x_subm-11) was disclosed.
sub_module(c16x_subm-10) was disclosed.
sub_module(c16x_subm-9) was disclosed.
sub_module(c16x_subm-8) was disclosed.
sub_module(c16x_subm-7) was disclosed.
sub_module(c16x_subm-6) was disclosed.
created a new sub_module. class: cla32_subc-1, name: cla32_subm-1
 nof_pcds: 11, nof_inputs: 5, nof_outputs: 5
    all statistics calculated
opt_map: start to read cla32._dr/cla32_subc-1.nld
   [/cla32_subm-1]
	change power   28.700000 to 28.200000
	change area    4.910000 to 4.180000
	change gates   17.000000 to 14.000000
	net_num is 13
	dot_num is 32
opt_map: start to read cla32._dr/cla16_subc-5.nld
   [/c16y/c16y_subm-5]
	change power   79.100000 to 78.500000
	change area    12.880000 to 9.690000
	change gates   46.000000 to 36.000000
	net_num is 28
	dot_num is 68
opt_map: start to read cla32._dr/cla16_subc-4.nld
   [/c16y/c16y_subm-4]
	change power   96.200000 to 89.400000
	change area    15.950000 to 11.530000
	change gates   56.000000 to 41.000000
	net_num is 31
	dot_num is 78
opt_map: start to read cla32._dr/cla16_subc-3.nld
   [/c16y/c16y_subm-3]
	change power   79.100000 to 78.500000
	change area    12.880000 to 9.690000
	change gates   46.000000 to 36.000000
	net_num is 28
	dot_num is 68
opt_map: start to read cla32._dr/cla16_subc-2.nld
   [/c16y/c16y_subm-2]
	change power   29.300000 to 26.700000
	change area    4.660000 to 4.050000
	change gates   17.000000 to 16.000000
	net_num is 15
	dot_num is 34
opt_map: start to read cla32._dr/cla16_subc-1.nld
   [/c16y/c16y_subm-1]
	change power   97.600000 to 94.000000
	change area    16.320000 to 12.400000
	change gates   57.000000 to 45.000000
	net_num is 34
	dot_num is 84
opt_map: start to read cla32._dr/cla16_subc-10.nld
   [/c16x/c16x_subm-5]
	change power   79.100000 to 78.500000
	change area    12.880000 to 9.690000
	change gates   46.000000 to 36.000000
	net_num is 28
	dot_num is 68
opt_map: start to read cla32._dr/cla16_subc-9.nld
   [/c16x/c16x_subm-4]
	change power   96.200000 to 89.400000
	change area    15.950000 to 11.530000
	change gates   56.000000 to 41.000000
	net_num is 31
	dot_num is 78
opt_map: start to read cla32._dr/cla16_subc-8.nld
   [/c16x/c16x_subm-3]
	change power   79.100000 to 78.500000
	change area    12.880000 to 9.690000
	change gates   46.000000 to 36.000000
	net_num is 28
	dot_num is 68
opt_map: start to read cla32._dr/cla16_subc-7.nld
   [/c16x/c16x_subm-2]
	change power   29.300000 to 26.700000
	change area    4.660000 to 4.050000
	change gates   17.000000 to 16.000000
	net_num is 15
	dot_num is 34
opt_map: start to read cla32._dr/cla16_subc-6.nld
   [/c16x/c16x_subm-1]
	change power   97.600000 to 94.000000
	change area    16.320000 to 12.400000
	change gates   57.000000 to 45.000000
	net_num is 34
	dot_num is 84
--- disclose -------------------------------
sub_module(c16y_subm-5) was disclosed.
sub_module(c16y_subm-4) was disclosed.
sub_module(c16y_subm-3) was disclosed.
sub_module(c16y_subm-2) was disclosed.
sub_module(c16y_subm-1) was disclosed.
sub_module(c16x_subm-5) was disclosed.
sub_module(c16x_subm-4) was disclosed.
sub_module(c16x_subm-3) was disclosed.
sub_module(c16x_subm-2) was disclosed.
sub_module(c16x_subm-1) was disclosed.
sub_module(cla32_subm-1) was disclosed.
####### after ONSET ###################
    all statistics calculated
--- statistics summary --------------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1442.4
	area       = 159.2
	gates      = 641

		synthesized gates = 509
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- compo--------- submodule cla32_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-10 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
nent summary ---------------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          313             2         1414         155          627 cla16
pcd            3             1            8           1            3 aoi--21
pcd            1             4            6           1            4 inv-
pcd            2             2            7           1            4 nand--2
pcd            3             1            8           1            3 oai--21
-------------------------------------------------------------------------------
pcd_total                    8           28           4           14
####### ONSET iteration 2 #######
####### apply ONSET on each flatten submodule ########
type class  power         area                 gates  sub_mod_name
------------------------------------------------------------------
nld  cla16  7.061000e+02  7.745000e+01           313  c16y
nld  cla16  7.081000e+02  7.757000e+01           314  c16x
--- flat & enclose at each nld in the top-module -------
created a new sub_module. class: cla16_subc-1, name: c16y_subm-1
 nof_pcds: 22, nof_inputs: 12, nof_outputs: 9
created a new sub_module. class: cla16_subc-2, name: c16y_subm-2
 nof_pcds: 15, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-3, name: c16y_subm-3
 nof_pcds: 16, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-4, name: c16y_subm-4
 nof_pcds: 12, nof_inputs: 12, nof_outputs: 7
created a new sub_module. class: cla16_subc-5, name: c16y_subm-5
 nof_pcds: 6, nof_inputs: 5, nof_outputs: 3
created a new sub_module. class: cla16_subc-6, name: c16y_subm-6
 nof_pcds: 5, nof_inputs: 5, nof_outputs: 3
created a new sub_module. class: cla16_subc-7, name: c16y_subm-7
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-8, name: c16y_subm-8
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-9, name: c16y_subm-9
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-10, name: c16y_subm-10
 nof_pcds: 7, nof_inputs: 12, nof_outputs: 3
sub_module(c16y_subm-9) was disclosed.
sub_module(c16y_subm-8) was disclosed.
sub_module(c16y_subm-7) was disclosed.
created a new sub_module. class: cla16_subc-7, name: c16x_subm-1
 nof_pcds: 21, nof_inputs: 12, nof_outputs: 8
created a new sub_module. class: cla16_subc-8, name: c16x_subm-2
 nof_pcds: 15, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-9, name: c16x_subm-3
 nof_pcds: 16, nof_inputs: 12, nof_outputs: 5
created a new sub_module. class: cla16_subc-11, name: c16x_subm-4
 nof_pcds: 12, nof_inputs: 12, nof_outputs: 7
created a new sub_module. class: cla16_subc-12, name: c16x_subm-5
 nof_pcds: 6, nof_inputs: 5, nof_outputs: 3
created a new sub_module. class: cla16_subc-13, name: c16x_subm-6
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-14, name: c16x_subm-7
 nof_pcds: 5, nof_inputs: 5, nof_outputs: 3
created a new sub_module. class: cla16_subc-15, name: c16x_subm-8
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-16, name: c16x_subm-9
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-17, name: c16x_subm-10
 nof_pcds: 1, nof_inputs: 2, nof_outputs: 1
created a new sub_module. class: cla16_subc-18, name: c16x_subm-11
 nof_pcds: 7, nof_inputs: 12, nof_outputs: 3
sub_module(c16x_subm-10) was disclosed.
sub_module(c16x_subm-9) was disclosed.
sub_module(c16x_subm-8) was disclosed.
sub_module(c16x_subm-6) was disclosed.
created a new sub_module. class: cla32_subc-1, name: cla32_subm-1
 nof_pcds: 8, nof_inputs: 5, nof_outputs: 6
    all statistics calculated
opt_map: start to read cla32._dr/cla32_subc-1.nld
  replacement was cancelled!
   [/cla32_subm-1]
	net_num is 13
	dot_num is 33
opt_map: start to read cla32._dr/cla16_subc-10.nld
  replacement was cancelled!
   [/c16y/c16y_subm-10]
	net_num --------- submodule c16y_subm-6 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-5 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-4 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-3 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-2 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16y_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-11 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-7 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-5 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-4 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-3 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-2 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
--------- submodule c16x_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/area.scr) ####
is 19
	dot_num is 42
opt_map: start to read cla32._dr/cla16_subc-6.nld
  replacement was cancelled!
   [/c16y/c16y_subm-6]
	net_num is 10
	dot_num is 24
opt_map: start to read cla32._dr/cla16_subc-5.nld
   [/c16y/c16y_subm-5]
	change power   18.400000 to 18.500000
	change area    2.820000 to 2.700000
	net_num is 10
	dot_num is 24
opt_map: start to read cla32._dr/cla16_subc-4.nld
   [/c16y/c16y_subm-4]
	change power   53.400000 to 49.400000
	change area    7.130000 to 6.140000
	change gates   25.000000 to 23.000000
	net_num is 22
	dot_num is 51
opt_map: start to read cla32._dr/cla16_subc-3.nld
  replacement was cancelled!
   [/c16y/c16y_subm-3]
	net_num is 28
	dot_num is 67
opt_map: start to read cla32._dr/cla16_subc-2.nld
   [/c16y/c16y_subm-2]
	change power   77.100000 to 77.400000
	change area    9.320000 to 9.050000
	net_num is 26
	dot_num is 65
opt_map: start to read cla32._dr/cla16_subc-1.nld
  replacement was cancelled!
   [/c16y/c16y_subm-1]
	net_num is 34
	dot_num is 85
opt_map: start to read cla32._dr/cla16_subc-18.nld
  replacement was cancelled!
   [/c16x/c16x_subm-11]
	net_num is 19
	dot_num is 42
opt_map: start to read cla32._dr/cla16_subc-14.nld
  replacement was cancelled!
   [/c16x/c16x_subm-7]
	net_num is 10
	dot_num is 24
opt_map: start to read cla32._dr/cla16_subc-12.nld
   [/c16x/c16x_subm-5]
	change power   18.400000 to 18.500000
	change area    2.820000 to 2.700000
	net_num is 10
	dot_num is 24
opt_map: start to read cla32._dr/cla16_subc-11.nld
   [/c16x/c16x_subm-4]
	change power   53.400000 to 49.400000
	change area    7.130000 to 6.140000
	change gates   25.000000 to 23.000000
	net_num is 22
	dot_num is 51
opt_map: start to read cla32._dr/cla16_subc-9.nld
  replacement was cancelled!
   [/c16x/c16x_subm-3]
	net_num is 28
	dot_num is 67
opt_map: start to read cla32._dr/cla16_subc-8.nld
   [/c16x/c16x_subm-2]
	change power   77.100000 to 77.400000
	change area    9.320000 to 9.050000
	net_num is 26
	dot_num is 65
opt_map: start to read cla32._dr/cla16_subc-7.nld
  replacement was cancelled!
   [/c16x/c16x_subm-1]
	net_num is 33
	dot_num is 82
--- disclose -------------------------------
sub_module(c16y_subm-10) was disclosed.
sub_module(c16y_subm-6) was disclosed.
sub_module(c16y_subm-5) was disclosed.
sub_module(c16y_subm-4) was disclosed.
sub_module(c16y_subm-3) was disclosed.
sub_module(c16y_subm-2) was disclosed.
sub_module(c16y_subm-1) was disclosed.
sub_module(c16x_subm-11) was disclosed.
sub_module(c16x_subm-7) was disclosed.
sub_module(c16x_subm-5) was disclosed.
sub_module(c16x_subm-4) was disclosed.
sub_module(c16x_subm-3) was disclosed.
sub_module(c16x_subm-2) was disclosed.
sub_module(c16x_subm-1) was disclosed.
sub_module(cla32_subm-1) was disclosed.
####### after ONSET ###################
    all statistics calculated
--- statistics summary --------------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1435.2
	area       = 156.44
	gates      = 637

		synthesized gates = 503
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- component summary ---------------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          311             2         1407         152          623 cla16
pcd            3             1            8           1            3 aoi--21
pcd            1             4            6           1            4 inv-
pcd            2             2            7           1            4 nand--2
pcd            3             1            8           1            3 oai--21
-------------------------------------------------------------------------------
pcd_total                    8           28           4           14
####### output ############################
** check level 1 **
** check level 2 **
rm -f cla32._tp
touch cla32.2off
rm -rf cla32.3rd cla32.3on cla32.3off
mkdir cla32.3rd
rinv cla32 cla32.2nd /home/users/ecs/nobuya/opt/parthenon/sfl_lib.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start_ex.dir -w cla32.3rd
touch cla32.3off
cat /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/opt_scr.op2 | sed 's/TargeT/cla32/' > cla32.op2
cat /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/opt_scr.cpb | sed 's/TargeT/cla32/' \
	| sed 's/InputpiN/12/' > cla32.tmp
echo "echo OK!" > cla32.cpb
ITR_TIMES=1 ;\
	while (test $ITR_TIMES -le 2) \
	do \
	   echo "making script file for ONSET CPB iteration $ITR_TIMES" ;\
	   echo "echo ####### ONSET CPB iteration $ITR_TIMES #######" >> cla32.cpb ;\
	   cat cla32.tmp >> cla32.cpb ;\
	   ITR_TIMES=`expr $ITR_TIMES + 1` ;\
	done
making script file for ONSET CPB iteration 1
making script file for ONSET CPB iteration 2
rm -f cla32.tmp
rm -rf cla32.4th cla32.4on cla32.4off
mkdir cla32.4th
echo cla32.op2 | opt_map cla32 cla32.3rd /home/users/ecs/nobuya/opt/parthenon/sfl_lib.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start_ex.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/cell.dir /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/cell_ex.dir 

+-------------------------------------------------------------+
| OPT_MAP       3.0 2002/08/31 (i686-Linux-2.6.27-10-generic) |
|             This program is a part of the PARTHENON system. |
|                                 Copyright (C) 1989-2002 NTT |
+-------------------------------------------------------------+

** load library from cla32.3rd **
** load library from /home/users/ecs/nobuya/opt/parthenon/sfl_lib.dir **
opt_map: start to read r1024_8.pcd
opt_map: start to read r256_8.pcd
opt_map: start to read r64_8.pcd
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start.dir **
opt_map: start to read and--2.pcd
opt_map: start to read and--3.pcd
opt_map: start to read and--4.pcd
opt_map: start to read and--5.pcd
opt_map: start to read and--6.pcd
opt_map: start to read and--7.pcd
opt_map: start to read and--8.pcd
opt_map: start to read aoi--21.pcd
opt_map: start to read aoi--211.pcd
opt_map: start to read aoi--22.pcd
opt_map: start to read aoi--221.pcd
opt_map: start to read aoi--222.pcd
opt_map: start to read aoi--31.pcd
opt_map: start to read aoi--32.pcd
opt_map: start to read aoi--33.pcd
opt_map: start to read bgate--2.pcd
opt_map: start to read enor--2.pcd
opt_map: start to read eor--2.pcd
opt_map: start to read high-.pcd
opt_map: start to read inv-.pcd
opt_map: start to read low-.pcd
opt_map: start to read nand--2.pcd
opt_map: start to read nand--3.pcd
opt_map: start to read nand--4.pcd
opt_map: start to read nand--5.pcd
opt_map: start to read nand--6.pcd
opt_map: start to read nand--7.pcd
opt_map: start to read nand--8.pcd
opt_map: start to read ninv-.pcd
opt_map: start to read nor--2.pcd
opt_map: start to read nor--3.pcd
opt_map: start to read nor--4.pcd
opt_map: start to read nor--5.pcd
opt_map: start to read nor--6.pcd
opt_map: start to read nor--7.pcd
opt_map: start to read nor--8.pcd
opt_map: start to read oai--21.pcd
opt_map: start to read oai--211.pcd
opt_map: start to read oai--22.pcd
opt_map: start to read oai--221.pcd
opt_map: start to read oai--222.pcd
opt_map: start to read oai--31.pcd
opt_map: start to read oai--32.pcd
opt_map: start to read oai--33.pcd
opt_map: start to read or--2.pcd
opt_map: start to read or--3.pcd
opt_map: start to read or--4.pcd
opt_map: start to read or--5.pcd
opt_map: start to read or--6.pcd
opt_map: start to read or--7.pcd
opt_map: start to read or--8.pcd
opt_map: start to read reg---1.pcd
opt_map: start to read reg--1.pcd
opt_map: start to read reg-1.pcd
opt_map: start to read regr-1.pcd
opt_map: start to read regs-1.pcd
opt_map: start to read sreg---1.pcd
opt_map: start to read sreg--1.pcd
opt_map: start to read sreg-1.pcd
opt_map: start to read srgr-1.pcd
opt_map: start to read srgs-1.pcd
opt_map: start to read ts_buf-.pcd
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/start_ex.dir **
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/cell.dir **
opt_map: start to read an1_i2.pcd
opt_map: start to read an1_i3.pcd
opt_map: start to read an1_i4.pcd
opt_map: start to read an1_i5.pcd
opt_map: start to read an1_i6.pcd
opt_map: start to read an1_i7.pcd
opt_map: start to read an1_i8.pcd
opt_map: start to read an3_i2.pcd
opt_map: start to read an3_i3.pcd
opt_map: start to read an3_i4.pcd
opt_map: start to read an3_i5.pcd
opt_map: start to read an3_i6.pcd
opt_map: start to read an3_i7.pcd
opt_map: start to read an3_i8.pcd
opt_map: start to read ao_i21.pcd
opt_map: start to read ao_i211.pcd
opt_map: start to read ao_i22.pcd
opt_map: start to read ao_i221.pcd
opt_map: start to read ao_i222.pcd
opt_map: start to read ao_i31.pcd
opt_map: start to read ao_i32.pcd
opt_map: start to read ao_i33.pcd
opt_map: start to read bf1_i1.pcd
opt_map: start to read bf2_i1.pcd
opt_map: start to read bf3_i1.pcd
opt_map: start to read bgnd1_i2.pcd
opt_map: start to read bgnd3_i2.pcd
opt_map: start to read cbf1_i1.pcd
opt_map: start to read cbf2_i1.pcd
opt_map: start to read cbf3_i1.pcd
opt_map: start to read dbf1_i1.pcd
opt_map: start to read dbf2_i1.pcd
opt_map: start to read dbf3_i1.pcd
opt_map: start to read dt_reg.pcd
opt_map: start to read dt_sreg.pcd
opt_map: start to read dtr_reg.pcd
opt_map: start to read dtr_sreg.pcd
opt_map: start to read dts_reg.pcd
opt_map: start to read dts_sreg.pcd
opt_map: start to read high-.pcd
    skip this (module 'high-.pcd' is already installed)
opt_map: start to read in1_i1.pcd
opt_map: start to read in2_i1.pcd
opt_map: start to read in3_i1.pcd
opt_map: start to read low-.pcd
    skip this (module 'low-.pcd' is already installed)
opt_map: start to read nd1_i2.pcd
opt_map: start to read nd1_i3.pcd
opt_map: start to read nd1_i4.pcd
opt_map: start to read nd1_i5.pcd
opt_map: start to read nd1_i6.pcd
opt_map: start to read nd1_i7.pcd
opt_map: start to read nd1_i8.pcd
opt_map: start to read nd3_i2.pcd
opt_map: start to read nd3_i3.pcd
opt_map: start to read nd3_i4.pcd
opt_map: start to read nd3_i5.pcd
opt_map: start to read nd3_i6.pcd
opt_map: start to read nd3_i7.pcd
opt_map: start to read nd3_i8.pcd
opt_map: start to read nr1_i2.pcd
opt_map: start to read nr1_i3.pcd
opt_map: start to read nr1_i4.pcd
opt_map: start to read nr1_i5.pcd
opt_map: start to read nr1_i6.pcd
opt_map: start to read nr1_i7.pcd
opt_map: start to read nr1_i8.pcd
opt_map: start to read nr3_i2.pcd
opt_map: start to read nr3_i3.pcd
opt_map: start to read nr3_i4.pcd
opt_map: start to read nr3_i5.pcd
opt_map: start to read nr3_i6.pcd
opt_map: start to read nr3_i7.pcd
opt_map: start to read nr3_i8.pcd
opt_map: start to read oa_i21.pcd
opt_map: start to read oa_i211.pcd
opt_map: start to read oa_i22.pcd
opt_map: start to read oa_i221.pcd
opt_map: start to read oa_i222.pcd
opt_map: start to read oa_i31.pcd
opt_map: start to read oa_i32.pcd
opt_map: start to read oa_i33.pcd
opt_map: start to read or1_i2.pcd
opt_map: start to read or1_i3.pcd
opt_map: start to read or1_i4.pcd
opt_map: start to read or1_i5.pcd
opt_map: start to read or1_i6.pcd
opt_map: start to read or1_i7.pcd
opt_map: start to read or1_i8.pcd
opt_map: start to read or3_i2.pcd
opt_map: start to read or3_i3.pcd
opt_map: start to read or3_i4.pcd
opt_map: start to read or3_i5.pcd
opt_map: start to read or3_i6.pcd
opt_map: start to read or3_i7.pcd
opt_map: start to read or3_i8.pcd
opt_map: start to read sts_reg.pcd
opt_map: start to read sts_sreg.pcd
opt_map: start to read tbf1_i2.pcd
opt_map: start to read tbf2_i2.pcd
opt_map: start to read tbf3_i2.pcd
opt_map: start to read tsk_reg.pcd
opt_map: start to read tsk_sreg.pcd
opt_map: start to read xn1_i2.pcd
opt_map: start to read xn3_i2.pcd
opt_map: start to read xo1_i2.pcd
opt_map: start to read xo3_i2.pcd
** load library from /home/users/ecs/nobuya/opt/parthenon/cell_lib.dir/DEMO/demo/cell_ex.dir **
** install top module (cla32) **
opt_map: start to read cla32.3rd/cla32.nld
opt_map: start to read cla32.3rd/cla32_cla16-1.nld
opt_map: start to read cla32.3rd/cla32_cla16_m1-1.nld
####### start  ############################
    all statistics calculated
--- initial statistics summary ------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1412.9
	area       = 150.77
	gates      = 622

		synthesized gates = 8
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- initial component summary -------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          305             1          695          74          305 cla32_cla16-1
nld          303             1          690          73          303 cla32_cla16_m1-1
pcd            3             1            8           1            3 aoi--21
pcd            1             4            6           1            4 inv-
pcd            2             2            7           1            4 nand--2
pcd            3             1            8           1            3 oai--21
-------------------------------------------------------------------------------
pcd_total                    8           28           4           14
####### remove ############################
####### after remove ######################
    all statistics calculated
--- statistics summary --------------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1412.9
	area       = 150.77
	gates      = 622

		synthesized gates = 8
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- component summary ---------------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
nld          305             1          695          74          305 cla32_cla16-1
nld          303             1          690          73          303 cla32_cla16_m1-1
pcd            3             1            8           1            3 aoi--21
pcd            1             4            6           1            4 inv-
pcd            2             2            7           1            4 nand--2
pcd            3             1            8           1            3 oai--21
-------------------------------------------------------------------------------
pcd_total                    8           28           4           14
####### set conditions ####################
    top module pin initialized
        normal net    221
        in calc net     0
        source net     65
        inhibit net     0
        sink net        0
    no pin found
    no pin found
    no pin found
    no pin found
??error ext_pin(scan_clock) is not found
####### initial constraint ################
    all statistics calculated
    all load calculated
    all delay calculated

    --- failure constraint histogram for power up -----------------------
    7.20000e-01    6 ****
    6.48000e-01    6 ****
    5.76000e-01   26 ********************
    5.04000e-01    4 ***
    4.32000e-01   32 *************************
    3.60000e-01   23 *****************
    2.88000e-01   64 **************************************************
    2.16000e-01   25 *******************
    1.44000e-01   32 *************************
    7.20000e-02    3 **
    ---------------------------------------------------------------------
    total        221
    maximum difference  7.20000e-01
    minimum difference  6.80000e-02
    average difference  3.02706e-01

    --- no failure constraint for speed up -----

    --- no failure constraint for speed down ---

    --- no failure constraint for power down ---

####### optimize ##########################
   [power up]    replaced to /c16x/nor-4(nr1_i2) from (nor--2)
   [power up]    replaced to /c16x/eor-6(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-6(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-8(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-8(xo1_i2) from (eor--2)
   [power up]    replaced to /inv-2(in1_i1) from (inv-)
   [power up]    replaced to /c16x/enor-3(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-3(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-10(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-9(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-8(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-8(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-1(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-1(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/eor-20(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-3(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-21(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-3(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-1(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-10(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-12(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-14(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-18(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-1(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-10(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-12(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-15(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-19(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/oai-1(oa_i21) from (oai--21)
   [power up]    replaced to /c16y/oai-1(oa_i21) from (oai--21)
   [power up]    replaced to /c16x/nand-20(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-20(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/enor-5(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-6(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-5(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-6(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/oai-6(oa_i31) from (oai--31)
   [power up]    replaced to /c16y/oai-6(oa_i31) from (oai--31)
   [power up]    replaced to /c16x/eor-16(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-17(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/nand-10(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-10(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-37(nd1_i3) from (nand--3)
   [power up]    replaced to /c16y/nand-37(nd1_i3) from (nand--3)
   [power up]    replaced to /c16x/inv-7(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-7(in1_i1) from (inv-)
   [power up]    replaced to /c16x/nand-5(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-5(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/inv-9(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-9(in1_i1) from (inv-)
   [power up]    replaced to /c16x/nand-17(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-35(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-4(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-7(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nor-6(nr1_i3) from (nor--3)
   [power up]    replaced to /c16x/nor-7(nr1_i3) from (nor--3)
   [power up]    replaced to /c16y/nand-17(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-35(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-4(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-7(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nor-5(nr1_i3) from (nor--3)
   [power up]    replaced to /c16x/nor-3(nr1_i2) from (nor--2)
   [power up]    replaced to /c16y/nor-3(nr1_i2) from (nor--2)
   [power up]    replaced to /c16x/inv-12(in1_i1) from (inv-)
   [power up]    replaced to /c16x/inv-4(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-12(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-4(in1_i1) from (inv-)
   [power up]    replaced to /c16x/nand-33(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-33(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/oai-7(oa_i31) from (oai--31)
   [power up]    replaced to /c16x/oai-8(oa_i31) from (oai--31)
   [power up]    replaced to /c16y/oai-7(oa_i31) from (oai--31)
   [power up]    replaced to /c16y/oai-8(oa_i31) from (oai--31)
   [power up]    replaced to /nand-1(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/oai-12(oa_i221) from (oai--221)
   [power up]    replaced to /c16y/nor-6(nr1_i3) from (nor--3)
   [power up]    replaced to /c16x/aoi-3(ao_i31) from (aoi--31)
   [power up]    replaced to /c16y/aoi-3(ao_i31) from (aoi--31)
   [power up]    replaced to /c16x/nand-21(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-21(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-18(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-18(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-12(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-25(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-12(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-25(nd1_i2) from (nand--2)
   [power up]    replaced to /aoi-1(ao_i21) from (aoi--21)
   [power up]    replaced to /c16x/aoi-4(ao_i32) from (aoi--32)
   [power up]    replaced to /c16y/aoi-4(ao_i32) from (aoi--32)
   [power up]    replaced to /c16x/oai-5(oa_i21) from (oai--21)
   [power up]    replaced to /c16y/oai-5(oa_i21) from (oai--21)
   [power up]    replaced to /c16x/inv-5(in1_i1) from (inv-)
   [power up]    replaced to /c16x/inv-6(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-5(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-6(in1_i1) from (inv-)
   [power up]    replaced to /c16x/aoi-2(ao_i21) from (aoi--21)
   [power up]    replaced to /c16y/aoi-2(ao_i21) from (aoi--21)
   [power up]    replaced to /c16x/aoi-1(ao_i21) from (aoi--21)
   [power up]    replaced to /c16y/aoi-1(ao_i21) from (aoi--21)
   [power up]    replaced to /c16x/nand-39(nd1_i3) from (nand--3)
   [power up]    replaced to /c16y/nand-39(nd1_i3) from (nand--3)
   [power up]    replaced to /c16x/nand-14(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-19(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-2(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-22(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-23(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-27(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-28(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-32(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-8(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-9(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-14(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-19(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-2(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-22(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-23(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-27(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-28(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-32(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-8(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-9(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-13(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-24(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-26(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-3(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-31(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-13(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-24(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-26(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-3(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-31(nd1_i2) from (nand--2)
   [power up]    replaced to /inv-1(in1_i1) from (inv-)
   [power up]    replaced to /c16x/nand-1(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-29(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-1(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-29(nd1_i2) from (nand--2)
   [power up]    replaced to /nand-2(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/inv-10(in1_i1) from (inv-)
   [power up]    replaced to /c16x/inv-11(in1_i1) from (inv-)
   [power up]    replaced to /c16x/inv-3(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-10(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-11(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-3(in1_i1) from (inv-)
   [power up]    replaced to /c16x/oai-2(oa_i21) from (oai--21)
   [power up]    replaced to /c16x/oai-3(oa_i21) from (oai--21)
   [power up]    replaced to /c16x/oai-4(oa_i21) from (oai--21)
   [power up]    replaced to /c16y/oai-2(oa_i21) from (oai--21)
   [power up]    replaced to /c16y/oai-3(oa_i21) from (oai--21)
   [power up]    replaced to /c16y/oai-4(oa_i21) from (oai--21)
   [power up]    replaced to /c16x/nor-5(nr1_i3) from (nor--3)
   [power up]    replaced to /c16y/nor-4(nr1_i3) from (nor--3)
   [power up]    replaced to /c16x/nand-11(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-30(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-38(nd1_i3) from (nand--3)
   [power up]    replaced to /c16x/nor-1(nr1_i2) from (nor--2)
   [power up]    replaced to /c16x/nor-2(nr1_i2) from (nor--2)
   [power up]    replaced to /c16y/nand-11(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-30(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-38(nd1_i3) from (nand--3)
   [power up]    replaced to /c16y/nor-1(nr1_i2) from (nor--2)
   [power up]    replaced to /c16y/nor-2(nr1_i2) from (nor--2)
   [power up]    replaced to /c16x/nand-15(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-16(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-34(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-36(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/nand-6(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-15(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-16(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-34(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-36(nd1_i2) from (nand--2)
   [power up]    replaced to /c16y/nand-6(nd1_i2) from (nand--2)
   [power up]    replaced to /c16x/oai-10(oa_i211) from (oai--211)
   [power up]    replaced to /c16x/oai-11(oa_i211) from (oai--211)
   [power up]    replaced to /c16y/oai-10(oa_i211) from (oai--211)
   [power up]    replaced to /c16y/oai-11(oa_i211) from (oai--211)
   [power up]    replaced to /c16x/inv-1(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-1(in1_i1) from (inv-)
   [power up]    replaced to /c16x/aoi-5(ao_i221) from (aoi--221)
   [power up]    replaced to /c16y/aoi-5(ao_i221) from (aoi--221)
   [power up]    replaced to /c16x/inv-8(in1_i1) from (inv-)
   [power up]    replaced to /c16y/inv-8(in1_i1) from (inv-)
   [power up]    replaced to /c16x/inv-2(in1_i1) from (inv-)
   [power up]    replaced to /c16x/oai-9(oa_i211) from (oai--211)
   [power up]    replaced to /c16y/inv-2(in1_i1) from (inv-)
   [power up]    replaced to /c16y/oai-12(oa_i221) from (oai--221)
   [power up]    replaced to /c16y/oai-9(oa_i211) from (oai--211)
   [power up]    replaced to /c16x/enor-11(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-2(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-4(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-7(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/enor-9(xn1_i2) from (enor--2)
   [power up]    replaced to /c16x/eor-11(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-13(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-15(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-17(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-19(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-2(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-21(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-4(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-5(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-7(xo1_i2) from (eor--2)
   [power up]    replaced to /c16x/eor-9(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/enor-10(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-2(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-4(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/enor-7(xn1_i2) from (enor--2)
   [power up]    replaced to /c16y/eor-11(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-13(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-14(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-16(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-18(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-2(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-20(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-22(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-4(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-5(xo1_i2) --------- submodule cla32_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/delay.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/delay.scr) ####
from (eor--2)
   [power up]    replaced to /c16y/eor-7(xo1_i2) from (eor--2)
   [power up]    replaced to /c16y/eor-9(xo1_i2) from (eor--2)
   [power up]    replaced to /oai-1(oa_i21) from (oai--21)
   [power up]    replaced to /inv-3(in1_i1) from (inv-)
   [power up]    replaced to /inv-4(in1_i1) from (inv-)
####### flat ############################
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates class_name
-------------------------------------------------------------------------------
pcd            3             5           40           4           15 ao_i21
pcd            5             2           26           2           10 ao_i221
pcd            4             2           24           2            8 ao_i31
pcd            5             2           26           2           10 ao_i32
pcd            1            28           39          10           28 in1_i1
pcd            2            74          252          36          148 nd1_i2
pcd            3             6           29           4           18 nd1_i3
pcd            2             7           33           4           14 nr1_i2
pcd            4             6           60           5           24 nr1_i3
pcd            3            11           86           9           33 oa_i21
pcd            4             6           66           6           24 oa_i211
pcd            5             2           26           2           10 oa_i221
pcd            4             6           66           7           24 oa_i31
pcd            4            21          210          18           84 xn1_i2
pcd            4            43          430          37          172 xo1_i2
-------------------------------------------------------------------------------
pcd_total                  221         1413         151          622
    maximum rise delay path 1
        src  0  max 2.00000e+01  
        nml  1  max 2.20692e+01  (/a1      ) to (/zn      )  /c16x_enor-10(xn1_i2)
        nml  2  max 2.25652e+01  (/i       ) to (/zn      )  /c16x_inv-1(in1_i1)
        nml  3  max 2.40214e+01  (/a3      ) to (/zn      )  /c16x_aoi-4(ao_i32)
        nml  4  max 2.56958e+01  (/a2      ) to (/zn      )  /c16x_oai-10(oa_i211)
        nml  5  max 2.63918e+01  (/i       ) to (/zn      )  /c16x_inv-6(in1_i1)
        nml  6  max 2.80122e+01  (/a2      ) to (/zn      )  /c16x_oai-9(oa_i211)
        nml  7  max 2.95018e+01  (/b       ) to (/zn      )  /c16x_aoi-1(ao_i21)
        nml  8  max 3.13104e+01  (/a1      ) to (/zn      )  /c16x_oai-12(oa_i221)
        nml  9  max 3.28664e+01  (/a1      ) to (/zn      )  /c16x_nor-4(nr1_i2)
        nml 10  max 3.56430e+01  (/a3      ) to (/zn      )  /c16y_oai-6(oa_i31)
        nml 11  max 3.62610e+01  (/a2      ) to (/zn      )  /c16y_nand-19(nd1_i2)
        nml 12  max 3.73830e+01  (/a2      ) to (/zn      )  /c16y_nand-20(nd1_i2)
        nml 13  max 3.88886e+01  (/a3      ) to (/zn      )  /c16y_aoi-3(ao_i31)
        nml 14  max 4.02182e+01  (/a1      ) to (/zn      )  /c16y_oai-4(oa_i21)
        snk 15  max 4.13514e+01  (/a2      ) to (/zn      )  /c16y_enor-7(xn1_i2)
OK!
####### ONSET CPB iteration 1 #######
####### critical path break ##################
created a new sub_module. class: cla32_subc-1, name: cla32_subm-1
 nof_pcds: 12, nof_inputs: 12, nof_outputs: 10
    all statistics calculated
opt_map: start to read cla32._dr/cla32_subc-1.nld
   [/cla32_subm-1]
	change power   52.700000 to 89.900000
	change area    6.990000 to 12.430000
	change gates   24.000000 to 45.000000
	net_num is 32
	dot_num is 86
sub_module(cla32_subm-1) was disclosed.
    all statistics calculated
    all load calculated
    all delay calculated
   [power up]    replaced to /nor--2_29(nr1_i2) from (nor--2)
   [power up]    replaced to /nand--2_39(nd1_i2) from (nand--2)
   [power up]    replaced to /inv-_41(in1_i1) from (inv-)
   [power up]    replaced to /nor--2_37(nr1_i2) from (nor--2)
   [power up]    replaced to /inv-_44(in1_i1) from (inv-)
   [power up]    replaced to /nand--4_26(nd1_i4) from (nand--4)
   [power up]    replaced to /inv-_43(in1_i1) from (inv-)
   [powe--------- submodule cla32_subm-1 ------------
-*- enter ONSET Version 3.0 -*-
#### enter script file (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/delay.scr) ####
#### exit (/home/users/ecs/nobuya/opt/parthenon/com/onset.dir/delay.scr) ####
r up]    replaced to /nand--3_35(nd1_i3) from (nand--3)
   [power up]    replaced to /nand--3_36(nd1_i3) from (nand--3)
   [power up]    replaced to /nand--2_38(nd1_i2) from (nand--2)
   [power up]    replaced to /oai--21_27(oa_i21) from (oai--21)
   [power up]    replaced to /nor--3_25(nr1_i3) from (nor--3)
   [power up]    replaced to /inv-_47(in1_i1) from (inv-)
   [power up]    replaced to /nand--2_23(nd1_i2) from (nand--2)
   [power up]    replaced to /nor--2_33(nr1_i2) from (nor--2)
   [power up]    replaced to /inv-_45(in1_i1) from (inv-)
   [power up]    replaced to /oai--21_34(oa_i21) from (oai--21)
   [power up]    replaced to /oai--222_40(oa_i222) from (oai--222)
   [power up]    replaced to /inv-_42(in1_i1) from (inv-)
   [power up]    replaced to /inv-_46(in1_i1) from (inv-)
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1450.1
	area       = 156.21
	gates      = 643

		synthesized gates = 0
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
    maximum rise delay path 1
        src  0  max 2.00000e+01  
        nml  1  max 2.20692e+01  (/a1      ) to (/zn      )  /c16x_enor-10(xn1_i2)
        nml  2  max 2.25652e+01  (/i       ) to (/zn      )  /c16x_inv-1(in1_i1)
        nml  3  max 2.40214e+01  (/a3      ) to (/zn      )  /c16x_aoi-4(ao_i32)
        nml  4  max 2.56958e+01  (/a2      ) to (/zn      )  /c16x_oai-10(oa_i211)
        nml  5  max 2.63918e+01  (/i       ) to (/zn      )  /c16x_inv-6(in1_i1)
        nml  6  max 2.80122e+01  (/a2      ) to (/zn      )  /c16x_oai-9(oa_i211)
        nml  7  max 2.95018e+01  (/b       ) to (/zn      )  /c16x_aoi-1(ao_i21)
        nml  8  max 3.15994e+01  (/a1      ) to (/zn      )  /c16x_oai-12(oa_i221)
        nml  9  max 3.31734e+01  (/a1      ) to (/zn      )  /nor--2_29(nr1_i2)
        nml 10  max 3.47550e+01  (/a1      ) to (/zn      )  /oai--21_27(oa_i21)
        nml 11  max 3.54510e+01  (/i       ) to (/zn      )  /inv-_47(in1_i1)
        nml 12  max 3.79616e+01  (/a3      ) to (/zn      )  /c16y_oai-8(oa_i31)
        nml 13  max 3.85796e+01  (/a2      ) to (/zn      )  /c16y_nand-22(nd1_i2)
        nml 14  max 3.91796e+01  (/a2      ) to (/zn      )  /c16y_nand-24(nd1_i2)
        snk 15  max 4.03128e+01  (/a2      ) to (/z       )  /c16y_eor-4(xo1_i2)
####### ONSET CPB iteration 2 #######
####### critical path break ##################
created a new sub_module. class: cla32_subc-1, name: cla32_subm-1
 nof_pcds: 18, nof_inputs: 12, nof_outputs: 11
    all statistics calculated
opt_map: start to read cla32._dr/cla32_subc-1.nld
   [/cla32_subm-1]
	change power   89.000000 to 104.400000
	change area    11.810000 to 12.870000
	change gates   44.000000 to 46.000000
	net_num is 33
	dot_num is 89
sub_module(cla32_subm-1) was disclosed.
    all statistics calculated
    all load calculated
    all delay calculated
   [power up]    replaced to /nor--2_39(nr1_i2) from (nor--2)
   [power up]    replaced to /inv-_45(in1_i1) from (inv-)
   [power up]    replaced to /cla32_subm-1_inv-_46(in1_i1) from (inv-)
   [power up]    replaced to /nand--2_37(nd1_i2) from (nand--2)
   [power up]    replaced to /nor--2_36(nr1_i2) from (nor--2)
   [power up]    replaced to /nor--2_42(nr1_i2) from (nor--2)
   [power up]    replaced to /nand--2_26(nd1_i2) from (nand--2)
   [power up]    replaced to /oai--21_33(oa_i21) from (oai--21)
   [power up]    replaced to /inv-_48(in1_i1) from (inv-)
   [power up]    replaced to /inv-_51(in1_i1) from (inv-)
   [power up]    replaced to /aoi--22_41(ao_i22) from (aoi--22)
   [power up]    replaced to /inv-_49(in1_i1) from (inv-)
   [power up]    replaced to /nor--2_35(nr1_i2) from (nor--2)
   [power up]    replaced to /inv-_47(in1_i1) from (inv-)
   [power up]    replaced to /nor--2_24(nr1_i2) from (nor--2)
   [power up]    replaced to /cla32_subm-1_oai--21_34(oa_i21) from (oai--21)
   [power up]    replaced to /nor--2_31(nr1_i2) from (nor--2)
   [power up]    replaced to /oai--211_28(oa_i211) from (oai--211)
   [power up]    replaced to /cla32_subm-1_nor--3_25(nr1_i3) from (nor--3)
   [power up]    replaced to /aoi--221_43(ao_i221) from (aoi--221)
   [power up]    replaced to /inv-_50(in1_i1) from (inv-)
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1465.5
	area       = 157.27
	gates      = 645

		synthesized gates = 0
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
    maximum rise delay path 1
        src  0  max 2.00000e+01  
        nml  1  max 2.20692e+01  (/a1      ) to (/zn      )  /c16x_enor-10(xn1_i2)
        nml  2  max 2.25652e+01  (/i       ) to (/zn      )  /c16x_inv-1(in1_i1)
        nml  3  max 2.40214e+01  (/a3      ) to (/zn      )  /c16x_aoi-4(ao_i32)
        nml  4  max 2.56958e+01  (/a2      ) to (/zn      )  /c16x_oai-10(oa_i211)
        nml  5  max 2.63918e+01  (/i       ) to (/zn      )  /c16x_inv-6(in1_i1)
        nml  6  max 2.80122e+01  (/a2      ) to (/zn      )  /c16x_oai-9(oa_i211)
        nml  7  max 2.95018e+01  (/b       ) to (/zn      )  /c16x_aoi-1(ao_i21)
        nml  8  max 3.14974e+01  (/a1      ) to (/zn      )  /c16x_oai-12(oa_i221)
        nml  9  max 3.30714e+01  (/a1      ) to (/zn      )  /nor--2_39(nr1_i2)
        nml 10  max 3.44858e+01  (/b2      ) to (/zn      )  /aoi--22_41(ao_i22)
        nml 11  max 3.56818e+01  (/i       ) to (/zn      )  /cla32_subm-1_inv-_46(in1_i1)
        nml 12  max 3.72418e+01  (/a1      ) to (/zn      )  /cla32_subm-1_nor--3_25(nr1_i3)
        nml 13  max 3.90718e+01  (/a1      ) to (/zn      )  /nor--3_25(nr1_i3)
        nml 14  max 4.04514e+01  (/a2      ) to (/zn      )  /oai--21_34(oa_i21)
        snk 15  max 4.15846e+01  (/a2      ) to (/zn      )  /c16y_enor-7(xn1_i2)
####### remained constraint ###############
    --- no failure constraint for power up -----

    --- no failure constraint for speed up -----

    --- no failure constraint for speed down ---

    --- no failure constraint for power down ---

####### summary ###########################

    --- maximum rise delay path histogram -------------------------------
    4.15846e+01    9 *********
    3.74261e+01   16 ****************
    3.32677e+01    5 *****
    2.91092e+01    3 ***
    2.49508e+01    2 **
    2.07923e+01    0 
    1.66338e+01    0 
    1.24754e+01    0 
    8.31692e+00    0 
    4.15846e+00    0 
    ---------------------------------------------------------------------
    total         35
    delay path maximum  4.15846e+01
    delay path minimum  2.31844e+01
    delay path average  3.45307e+01

    --- minimum rise delay path histogram -------------------------------
    2.72432e+01    1 *
    2.45189e+01   33 *********************************
    2.17946e+01    1 *
    1.90702e+01    0 
    1.63459e+01    0 
    1.36216e+01    0 
    1.08973e+01    0 
    8.17296e+00    0 
    5.44864e+00    0 
    2.72432e+00    0 
    ---------------------------------------------------------------------
    total         35
    delay path maximum  2.72432e+01
    delay path minimum  2.11332e+01
    delay path average  2.30505e+01

        no path found
        no path found
        no path found
        no path found

    --- net load histogram ----------------------------------------------
    7.30000e-01    6 ****
    6.57000e-01    5 ***
    5.84000e-01   28 ******************
    5.11000e-01   20 *************
    4.38000e-01   35 ***********************
    3.65000e-01   63 ******************************************
    2.92000e-01   75 **************************************************
    2.19000e-01   30 ********************
    1.46000e-01   32 *********************
    7.30000e-02    3 **
    ---------------------------------------------------------------------
    total        297
    maximum  7.30000e-01
    minimum  6.80000e-02
    average  3.12098e-01

    maximum rise delay path 1
        src  0  max 2.00000e+01  
        nml  1  max 2.20692e+01  (/a1      ) to (/zn      )  /c16x_enor-10(xn1_i2)
        nml  2  max 2.25652e+01  (/i       ) to (/zn      )  /c16x_inv-1(in1_i1)
        nml  3  max 2.40214e+01  (/a3      ) to (/zn      )  /c16x_aoi-4(ao_i32)
        nml  4  max 2.56958e+01  (/a2      ) to (/zn      )  /c16x_oai-10(oa_i211)
        nml  5  max 2.63918e+01  (/i       ) to (/zn      )  /c16x_inv-6(in1_i1)
        nml  6  max 2.80122e+01  (/a2      ) to (/zn      )  /c16x_oai-9(oa_i211)
        nml  7  max 2.95018e+01  (/b       ) to (/zn      )  /c16x_aoi-1(ao_i21)
        nml  8  max 3.14974e+01  (/a1      ) to (/zn      )  /c16x_oai-12(oa_i221)
        nml  9  max 3.30714e+01  (/a1      ) to (/zn      )  /nor--2_39(nr1_i2)
        nml 10  max 3.44858e+01  (/b2      ) to (/zn      )  /aoi--22_41(ao_i22)
        nml 11  max 3.56818e+01  (/i       ) to (/zn      )  /cla32_subm-1_inv-_46(in1_i1)
        nml 12  max 3.72418e+01  (/a1      ) to (/zn      )  /cla32_subm-1_nor--3_25(nr1_i3)
        nml 13  max 3.90718e+01  (/a1      ) to (/zn      )  /nor--3_25(nr1_i3)
        nml 14  max 4.04514e+01  (/a2      ) to (/zn      )  /oai--21_34(oa_i21)
        snk 15  max 4.15846e+01  (/a2      ) to (/zn      )  /c16y_enor-7(xn1_i2)
        no path found
        no path found

    all statistics calculated
--- statistics summary --------------------
	position   = /
	type       = NLD
	class_name = cla32
	power      = 1465.5
	area       = 157.27
	gates      = 645

		synthesized gates = 0
		sum of inv- [n]and--M [n]or--M eor--2 of SFL module
		here M is 2 to 8
		this is valid for the netlist just produced by sflexp
--- component summary ---------------------
type class_gates nof_instances sum_of_power sum_of_area sum_of_gates (nof_include_nld) class_name
-------------------------------------------------------------------------------------------------
nld          645             1         1466         157          645 (0) cla32
pcd            3             5           40           4           15 ao_i21
pcd            4             1           10           1            4 ao_i22
pcd            5             3           39           3           15 ao_i221
pcd            4             1           12           1            4 ao_i31
pcd            5             2           26           2           10 ao_i32
pcd            1            32           45          12           32 in1_i1
pcd            2            72          245          35          144 nd1_i2
pcd            3             6           29           4           18 nd1_i3
pcd            2            13           61           8           26 nr1_i2
pcd            4             7           70           6           28 nr1_i3
pcd            3            13          101          11           39 oa_i21
pcd            4             7           77           7           28 oa_i211
pcd            5             2           26           2           10 oa_i221
pcd            4             4           44           4           16 oa_i31
pcd            4            21          210          18           84 xn1_i2
pcd            4            43          430          37          172 xo1_i2
-------------------------------------------------------------------------------------------------
pcd_total                  232         1466         157          645
--- pin summary ---------------------------
p typ c pin_load     net_load      dot drive_power  max_load     pin_name
-------------------------------------------------------------------------
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[9]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[8]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[7]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[6]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[5]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[4]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[3]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[31]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[30]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[2]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[29]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[28]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[27]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[26]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[25]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[24]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[23]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[22]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[21]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[20]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[1]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[19]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[18]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[17]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[16]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[15]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[14]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[13]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[12]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[11]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[10]
P OUT - 0.000000e+00 7.400000e-02    2 9.999999e+30 9.999999e+30 sum[0]
  UNU - 0.000000e+00 ------------ ---- 9.999999e+30 9.999999e+30 s_clock
P OUT - 0.000000e+00 6.800000e-02    2 9.999999e+30 9.999999e+30 qout
P OUT - 0.000000e+00 6.800000e-02    2 9.999999e+30 9.999999e+30 pout
  UNU - 0.000000e+00 ------------ ---- 9.999999e+30 1.000000e+00 p_reset
  UNU - 0.000000e+00 ------------ ---- 9.999999e+30 1.000000e+00 m_clock
  UNU - 0.000000e+00 ------------ ---- 9.999999e+30 9.999999e+30 do
P OUT - 0.000000e+00 7.200000e-02    2 9.999999e+30 9.999999e+30 cout
P INP - 0.000000e+00 4.500000e-01    4 9.999999e+30 9.999999e+30 cin
  UNU - 0.000000e+00 ------------ ---- 9.999999e+30 9.999999e+30 b_clock
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 b[9]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[8]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[7]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[6]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[5]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 b[4]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[3]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 b[31]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[30]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[2]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[29]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[28]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[27]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 b[26]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 b[25]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[24]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[23]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[22]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[21]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 b[20]
P INP - 0.000000e+00 2.700000e-01    3 9.999999e+30 9.999999e+30 b[1]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[19]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[18]
P INP - 0.000000e+00 2.700000e-01    3 9.999999e+30 9.999999e+30 b[17]
P INP - 0.000000e+00 4.400000e-01    4 9.999999e+30 9.999999e+30 b[16]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 b[15]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[14]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[13]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[12]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 b[11]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 b[10]
P INP - 0.000000e+00 4.400000e-01    4 9.999999e+30 9.999999e+30 b[0]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 a[9]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[8]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[7]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[6]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[5]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 a[4]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[3]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 a[31]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[30]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[2]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[29]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[28]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[27]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 a[26]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 a[25]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[24]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[23]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[22]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[21]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 a[20]
P INP - 0.000000e+00 2.700000e-01    3 9.999999e+30 9.999999e+30 a[1]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[19]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[18]
P INP - 0.000000e+00 2.700000e-01    3 9.999999e+30 9.999999e+30 a[17]
P INP - 0.000000e+00 4.400000e-01    4 9.999999e+30 9.999999e+30 a[16]
P INP - 0.000000e+00 2.600000e-01    3 9.999999e+30 9.999999e+30 a[15]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[14]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[13]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[12]
P INP - 0.000000e+00 3.100000e-01    3 9.999999e+30 9.999999e+30 a[11]
P INP - 0.000000e+00 4.800000e-01    4 9.999999e+30 9.999999e+30 a[10]
P INP - 0.000000e+00 4.400000e-01    4 9.999999e+30 9.999999e+30 a[0]
####### output ############################
** check level 1 **
** check level 1 **
rm -f cla32._tp
touch cla32.4off
